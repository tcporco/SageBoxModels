---
layout: page
title: "Adaptive Geometry and Resource Competition: Two Species, Two Resources, With A Values only depending on C Values"
wmd_project: Selection_Gradients
---

<source-file filename=maclev_a_c.py.step lang=python display=link>
# requires: maclev_2_2_defs.py
from maclev_2_2_defs import *

c = rescomp._indexers['c']

# special choice of m to make k unevolvable
m_const = -1
bm_bindings = Bindings( dict(
    [ (rescomp._indexers['b'][i], 1) for i in (0,1,2,3) ] +
    [ (rescomp._indexers['m'][i], K_0*c[i][0] + K_1*c[i][1] + m_const) for i in (0,1,2,3) ]
) )

ad_bindings = bm_bindings + gamma_bindings
initial_conditions = Bindings( {
    rescomp._indexers['c'][0][0] : Rational('3/5'),
    rescomp._indexers['c'][0][1] : Rational('2/5'),
    rescomp._indexers['c'][1][0] : Rational('2/5'),
    rescomp._indexers['c'][1][1] : Rational('3/5')
} )
</source-file>

<source-file filename=maclev-2-2-a-c-popdyn.sage.step lang=sage display=link>
# requires: maclev_a_c.py maclev_2_2_defs.py
# requires: $(SageDynamics)/dynamicalsystems.py maclevmodels.py
# produces: maclev-2-2-a-c-popdyn.sage.out.tex maclev-2-2-a-c-popdyn.sobj
# produces: maclev-2-2-a-c-popdyn.png maclev-2-2-a-c-r-zngis.png
from maclev_a_c import *

print 'start'
sys.stdout.flush()

ltx = latex_output( 'maclev-2-2-a-c-popdyn.sage.out.tex' )

ltx.write( 'The Mac-Lev model in generic form: ' )
ltx.write_block( maclev )

#print 'apply bindings:', ad_bindings
#sys.stdout.flush()

ltx.write( 'The Mac-Lev model with $c$ varying freely:' )
ltx.write_block( maclev.bind( ad_bindings + numeric_params ) )

print 'plot state space'
sys.stdout.flush()

maclev_initial_system = maclev.bind( ad_bindings + numeric_params + initial_conditions )
#ltx.write( 'Initial system bindings:', ad_bindings + numeric_params + initial_conditions )
#ltx.write( 'Initial system:', maclev_initial_system )

p = maclev_initial_system.plot_vector_field( (X_0, 0, 2), (X_1, 0, 2), color="gray", figsize=(5,5) )
p += maclev_initial_system.plot_ZNGIs( (X_0, 0, 2), (X_1, 0, 2), color="gray" )
s = maclev_initial_system.solve( [0.02, 0.05], end_time=integrate_popdyn_to )
p += s.plot( X_0, X_1, color='red' )
p.save( 'maclev-2-2-a-c-popdyn.png' )

rescomp_initial_system = maclev._rescomp_model.bind( ad_bindings + numeric_params + initial_conditions )
rescomp_initial_system.plot_R_ZNGIs( filename='maclev-2-2-a-c-r-zngis.png', figsize=(4,4), ymin=0, ymax=4, xmin=0, xmax=4 )

ltx.close()

save_session('maclev-2-2-a-c-popdyn')
</source-file>

The model equations, according to Sage:

<project-file filename=maclev-2-2-a-c-popdyn.sage.out.html/>

State space of this population dynamics model:

<project-file filename="maclev-2-2-a-c-popdyn.png"/>

ZNGI mutual invasion diagram.  Write more about this here.

<project-file filename="maclev-2-2-a-c-r-zngis.png"/>

## Adaptive dynamics of $$c$$

<source-file filename=maclev-2-2-a-c-adap.sage.step lang=sage display=link>
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageAdaptiveDynamics)/adaptivedynamics.py maclevmodels.py
# requires: maclev-2-2-a-c-popdyn.sobj maclev_2_2_defs.py
# produces: maclev-2-2-a-c-adap.sage.out.tex maclev-2-2-a-c-adap.sobj
from maclev_a_c import *

load_session( 'maclev-2-2-a-c-popdyn' )

ltx = latex_output( 'maclev-2-2-a-c-adap.sage.out.tex' )

#ltx.write_block( maclev )

#ltx.write( 'and with the functional and numeric bindings: ' )
ltx.write_block( maclev.bind( ad_bindings + numeric_params ) )

try:
    print 'create adaptive dynamics'
    maclev_adap_c = NumericalAdaptiveDynamicsModel( maclev,
        [ indexer_2d_reverse('c')[j] for j in (0,1) ],
	early_bindings = bm_bindings,
        late_bindings = ad_bindings + numeric_params,
        equilibrium_function = find_interior_equilibrium )
    ltx.write( 'adaptive dynamics of $c$ in that model:' )
    ltx.write_block( maclev_adap_c )
    #print maclev_adap_c

    #print '(bindings: ', ad_bindings + numeric_params, ')'

    #print ( 'find adaptive dynamics equilibria' )
    #sys.stdout.flush()

    #ltx.write( 'equilibria:' )
    #adap_equilibria = maclev_adap_c.equilibria( ranges={ u_0:(0.1,0.4,0.6,0.9), u_1:(0.1,0.4,0.6,0.9) } )
    #for eq in adap_equilibria:
    #    ltx.write_block( eq )

    print 'solve'
    sys.stdout.flush()

    try:
	integrate_adapdyn_step = 0.001
        c_evolution = maclev_adap_c.solve( [ initial_conditions( c ) for c in maclev_adap_c._vars ], end_time=integrate_adapdyn_to, step=integrate_adapdyn_step )
	#print 'adap dyn trajectory:', c_evolution
    except AdaptiveDynamicsException, e:
        print( 'AdaptiveDynamicsException: %s' % e ) 
        print 'Failed to integrate adaptive dynamics'
        sys.stdout.flush()
        ltx.write( e._latex_str or '', r'\\Exception: %s\\' % e )
except AdaptiveDynamicsException, e:
    print( 'AdaptiveDynamicsException: %s' % e )
    print 'Failed to construct adaptive dynamics'
    sys.stdout.flush()
    ltx.write( e._latex_str or '', r'\\Exception: %s\\' % e )

ltx.close()
save_session( 'maclev-2-2-a-c-adap' )
try:
    c_evolution
except NameError:
    sys.exit( int(1) )
print 'done'
sys.exit()
</source-file>

Here we derive the adaptive dynamics equations when it is the uptake rates $$c_{ij}$$ that is evolving -- that is, when $$c_{ij}=c_j(u_i)$$, $$b_0=1$$, and $$m_0=1$$; and then we bind the remaining parameters to get a realization of the system that we can integrate and plot.

<project-file filename=maclev-2-2-a-c-adap.sage.out.html/>

<source-file filename=maclev-2-2-a-c-p.sage.step display=link>
# requires: $(SageDynamics)/dynamicalsystems.py $(SageUtils)/latex_output.py
# requires: $(SageAdaptiveDynamics)/adaptivedynamics.py maclevmodels.py
# requires: maclev_2_2_defs.py maclev-2-2-a-c-adap.sobj
# produces: maclev-2-2-a-c-p.sage.out.tex
# produces: maclev-2-2-a-c-c-vs-t.sage.out.tex maclev-2-2-a-c-c-vs-c.png
from maclev_a_c import *

load_session( 'maclev-2-2-a-c-adap' )

ltx = latex_output( 'maclev-2-2-a-c-p.sage.out.tex' )

# plot c vs t

print 'plot c vs t'
sys.stdout.flush()

t = c_evolution._system._time_variable

c_timeseries = Graphics()
for i in maclev._population_indices:
    ci = [ rescomp._indexers['c'][i][0], rescomp._indexers['c'][i][1] ]
    c_timeseries += c_evolution.plot( t, ci[0], color=[ 'blue', 'red' ][i] )
    c_timeseries += c_evolution.plot( t, ci[1], color=[ 'blue', 'red' ][i] )

c_timeseries.axes_labels( [ '$t$', '$c$' ] )
c_timeseries.save( 'maclev-2-2-a-c-c-vs-t.png', figsize=(6,6), xmin=0, ymin=0 )

# plot c_1 vs c_0

print 'plot c vs c'
sys.stdout.flush()

c_phase_plane = Graphics()
for i in maclev._population_indices:
    ci = [ rescomp._indexers['c'][i][0], rescomp._indexers['c'][i][1] ]
    c_phase_plane += c_evolution.plot( ci[0], ci[1], color=[ 'blue', 'red' ][i] )

c_phase_plane.axes_labels( [ '$c_0$', '$c_1$' ] )
c_phase_plane.save( 'maclev-2-2-a-c-c-vs-c.png', figsize=(6,6), xmin=0, ymin=0 )

ltx.close()
save_session( 'maclev-2-2-a-c-p' )
</source-file>

<project-file filename=maclev-2-2-a-c-p.sage.out.html/>

<project-file filename=maclev-2-2-a-c-c-vs-t.png />

<project-file filename=maclev-2-2-a-c-c-vs-c.png />

<source-file filename=maclev-2-2-a-c-zngi.sage.step lang=sage display=link>
# requires: maclev_2_2_defs.py maclev-2-2-a-c-adap.sobj
# produces: maclev-2-2-a-c-zngi.sage.out.tex maclev-2-2-a-c-zngi-animation.gif
from maclev_a_c import *

load_session( 'maclev-2-2-a-c-adap.sobj' )

ltx = latex_output( 'maclev-2-2-a-c-zngi.sage.out.tex' )

rescomp_abstract = rescomp.bind( numeric_params )
rescomp_initial = rescomp_abstract.bind( ad_bindings, initial_conditions )

def zngi_R1( x ):
    assume( R_0 > 0, R_1 > 0 )
    zngi = solve( rescomp_abstract._flow[x] == 0, R_1, solution_dict=True )[0][R_1]
    forget()
    return numeric_params( zngi )

zngi_generic_parametric = (bm_bindings + numeric_params)(rescomp_abstract._flow[X_0]/X_0) == 0

zngis_generic = [ zngi_R1( x ) for x in ( X_0, X_1 ) ]

zngis_numeric = [
    [ Bindings(p)( numeric_params( ad_bindings( r ) ) ) for r in zngis_generic ]
    for p in c_evolution._timeseries ]

rmax = [
    [ solve( r1, R_0, solution_dict=True )[0][R_0] for r1 in zs ]
    for zs in zngis_numeric ]

plot_line_args = dict( ymin=0, ymax=4, xmax=4, figsize=(5,5), color='gray' )
plot_fill_args = dict( plot_line_args, fill=True, fillcolor='gray', fillalpha=0.3, thickness=2 )

ltx.write( 'generic ZNGI curve:' )
ltx.write_block( zngi_generic_parametric )

def main():
    zplot = Graphics()
    anima = []

    print 'create frames'; sys.stdout.flush()
    for zs, r0s in zip(zngis_numeric, rmax):
        frame = Graphics()
        for r1, r0max in zip(zs, r0s):
	    if r0max > 0:
                frame += plot( r1, (R_0, 0, r0max), **plot_fill_args )
                zplot += plot( r1, (R_0, 0, r0max), **plot_line_args )
        frame.axes_labels( [ '$%s$'%latex(r) for r in (R_0, R_1) ] )
        anima += [ frame ]

    print 'create animate gif'; sys.stdout.flush()
    animation = animate( anima, xmin=0, xmax=4, ymin=0, ymax=4, figsize=(5,5) )
    animation.save( 'maclev-2-2-a-c-zngi-animation.gif' )
    return 0

if __name__ == '__main__':
    status = main()
else:
    status = 0

ltx.close()
save_session('maclev-2-2-zngi')
sys.exit(int(status))
</source-file>

<project-file filename=maclev-2-2-a-c-zngi.sage.out.html/>

<project-file filename="maclev-2-2-a-c-zngi-animation.gif"/>

The $$R_0$$- and $$R_1$$-intercepts of a given line are $$\frac{m_i}{c_{ji}}$$
for that species $$i$$ and that resource $$j$$.

The current resource concentration $$(R_0, R_1)$$ is the point of
intersection of the two gray ZNGI lines.

Evolution proceeds by invasion into the gray region: each line shifts
in whichever direction places the current
resources $$(R_0, R_1)$$ in the white region above the line.

## Adaptive Geometry: Community-structure measures $$a$$ and $$k$$

<source-file filename=maclev-2-2-a-c-geom.sage.step lang=sage display=link>
# requires: $(SageDynamics)/dynamicalsystems.py $(SageUtils)/latex_output.py
# requires: $(SageAdaptiveDynamics)/adaptivedynamics.py maclevmodels.py 
# requires: lotkavolterra.py
# requires: maclev_2_2_defs.py maclev-2-2-a-c-adap.sobj
# produces: maclev-2-2-a-c-geom.sage.out.tex
# produces: maclev-2-2-a-c-k-vs-t.png maclev-2-2-a-c-a-vs-t.png
# produces: maclev-2-2-a-c-Xhat-vs-t.png maclev-2-2-a-c-Rhat-vs-t.png
# produces: maclev-2-2-a-c-a-vs-a.png
# produces: maclev-2-2-a-c-a-vs-k.png maclev-2-2-a-c-a-arrows.png
from maclev_a_c import *
from lotkavolterra import *

load_session( 'maclev-2-2-a-c-adap' )

ltx = latex_output( 'maclev-2-2-a-c-geom.sage.out.tex' )

# I don't trust FunctionBindings any more, but I need to use it briefly
# to get tractable adaptive dynamics here.
bmc_to_fn_bindings = Bindings( dict(
    [ ( maclev._rescomp_model._indexers['c'][i][j],
        function( 'c_%s'%j )( u_indexer[i] ) )
      for i in (0,1,2,3) for j in (0,1) ] +
    [ ( maclev._rescomp_model._indexers['b'][i], function('b')( u_indexer[i] ) ) for i in (0,1,2,3) ] +
    [ ( maclev._rescomp_model._indexers['m'][i], function('m')( u_indexer[i] ) ) for i in (0,1,2,3) ]
    ) )
bmc_from_fn_bindings = Bindings( FunctionBindings( dict(
    [ ( function( 'c_%s'%j ), c_func(0,j).function( u_indexer[0] ) )
        for j in (0,1) ] +
    [ ( function( 'b' ), SR(1) ), ( function('m'), SR(1) ) ]
    ) ) )

lv_adap_c = LotkaVolterraAdaptiveDynamics( maclev_adap_c, r_name='k' )

class SeriesOfBindings( Bindings ):
    def __init__( self, *args ):
        # this list of bindings will be applied from right to left
        self._series = args
    def substitute( self, expr ):
        return self.substitute_list( self._series, expr )
    def substitute_list( self, series, expr ):
        if not series: return expr
        return series[0]( self.substitute_list( series[1:], expr ) )
    def _latex_(self):
        from operator import add
        return reduce( add, map( latex, self._series ) )

A_to_u_bindings = SeriesOfBindings(
    bm_bindings + numeric_params + ad_bindings
        + lv_adap_c._lv_model._A_bindings
        + lv_adap_c._adaptivedynamics._late_bindings
        + lv_adap_c._lv_model.interior_equilibrium_bindings(),
    lv_adap_c._phenotypes_from_fn_bindings,
    lv_adap_c.dudt_bindings(),
    lv_adap_c._phenotypes_to_fn_bindings )

print 'printing things in LaTeX'
sys.stdout.flush()

#ltx.write( 'A\_to\_u\_bindings is ' + latex( A_to_u_bindings ) )

ltx.write_equality( SR('A(0)'), lv_adap_c.A(0), A_to_u_bindings( lv_adap_c.A(0) ) )
ltx.write_equality( SR('A(1)'), lv_adap_c.A(1), A_to_u_bindings( lv_adap_c.A(1) ) )
ltx.write_equality( SR('S(A(0))'), lv_adap_c.S( lv_adap_c.A(0) ), lv_adap_c._lv_model.interior_equilibrium_bindings()( lv_adap_c.S( lv_adap_c.A(0) ) ) )
ltx.write_equality( SR('S(A(1))'), lv_adap_c.S( lv_adap_c.A(1) ), lv_adap_c._lv_model.interior_equilibrium_bindings()( lv_adap_c.S( lv_adap_c.A(1) ) ) ) 

ltx.write_equality( wrap_latex( 'D(u_0)' ), lv_adap_c.direct_effect(0)
    #, A_to_u_bindings( lv_adap_c.direct_effect(0) )
)
ltx._output.flush()
ltx.write_equality( wrap_latex( 'I(u_0)' ), lv_adap_c.indirect_effect(0)
    #, A_to_u_bindings( lv_adap_c.indirect_effect(0) )
)
ltx._output.flush()
ltx.write_equality( wrap_latex( r'\frac{dA}{dt}' ), lv_adap_c.dAdt(0)
    #, A_to_u_bindings( lv_adap_c.dAdt(0) )
)
ltx._output.flush()

t = maclev_adap_c._time_variable

print 'plot k vs. t'
sys.stdout.flush()

# plot k values vs. time
k_timeseries = Graphics();
for i in (0, 1):
    print ( str( lv_adap_c._lv_model._indexers['r'][i] ) + ': ' +
        str( A_to_u_bindings( lv_adap_c._lv_model._A_bindings( lv_adap_c._lv_model._indexers['r'][i] ) ) ) )
    k_timeseries += c_evolution.plot( t,
        A_to_u_bindings( lv_adap_c._lv_model._A_bindings( lv_adap_c._lv_model._indexers['r'][i] ) ),
        color=[ 'blue', 'red' ][i], figsize=(4,4) )
k_timeseries.axes_labels( [ '$t$', '$k(\cdot)$' ] )
k_timeseries.save( 'maclev-2-2-a-c-k-vs-t.png' )

print 'plot a vs. t'
sys.stdout.flush()

# plot interactions vs. time in Xmas colors
a_timeseries = Graphics()
for i in (0, 1):
    for j in (0, 1):
        a_timeseries += c_evolution.plot( t,
            A_to_u_bindings( lv_adap_c._lv_model._A_bindings( lv_adap_c._lv_model._indexers['a'][i][j] ) ), 
            color=(i == j and 'red' or 'lime'), figsize=(4,4) )
a_timeseries.axes_labels( [ '$t$', '$a(\cdot,\cdot)$' ] )
a_timeseries.save( 'maclev-2-2-a-c-a-vs-t.png' )

print 'plot X vs. t'
sys.stdout.flush()

# population size vs time
X_timeseries = Graphics()
for i in (0, 1):
    #print ( str( hat( lv_adap_c._lv_model._population_indexer[i] ) ) + ': ' +
        #str( A_to_u_bindings( lv_adap_c._lv_model.interior_equilibrium_bindings()( hat( lv_adap_c._lv_model._population_indexer[i] ) ) ) ) )
    X_timeseries += c_evolution.plot( t,
        A_to_u_bindings( lv_adap_c._lv_model.interior_equilibrium_bindings()( hat( lv_adap_c._lv_model._population_indexer[i] ) ) ),
        color=[ 'blue', 'red' ][i], figsize=(4,4) )
X_timeseries.axes_labels( [ '$t$', '$\hat{X}$' ] )
X_timeseries.save( 'maclev-2-2-a-c-Xhat-vs-t.png' )

print 'plot R vs. t'
sys.stdout.flush()

# population size vs time
R_timeseries = Graphics()
for i in (0, 1):
    ri = A_to_u_bindings( Bindings( { X_0: hat(X_0), X_1: hat(X_1) } )( maclev._bindings( SR('R_%s'%i) ) ) )
    #print ri
    #print Bindings( c_evolution._timeseries[0] )( ri )
    sys.stdout.flush()
    R_timeseries += c_evolution.plot( t, ri,
        color=[ 'blue', 'red' ][i], figsize=(4,4) )
R_timeseries.axes_labels( [ '$t$', '$\hat{R}$' ] )
R_timeseries.save( 'maclev-2-2-a-c-Rhat-vs-t.png' )

print 'plot a vs. a'
sys.stdout.flush()

# plot interactions in A space
a_phase_plane = Graphics()
#from sage.plot.plot3d.base import Graphics3d
#a_3d = Graphics3d()
for i in (0, 1):
    a_phase_plane += c_evolution.plot(
        A_to_u_bindings( lv_adap_c._lv_model._indexers['a'][i][0] ),
        A_to_u_bindings( lv_adap_c._lv_model._indexers['a'][i][1] ),
        color=[ 'blue', 'red' ][i] )
    #a_3d += c_evolution.plot3d(
        #A_to_u_bindings( lv_adap_c._lv_model._indexers['a'][i][0] ),
        #A_to_u_bindings( lv_adap_c._lv_model._indexers['a'][i][1] ),
        #A_to_u_bindings( lv_adap_c._lv_model._indexers['r'][i] ),
        #color=[ 'blue', 'red' ][i] )
a_phase_plane.axes_labels( [ '$a(u_0,\cdot)$', '$a(u_1,\cdot)$' ] )
a_phase_plane.save( 'maclev-2-2-a-c-a-vs-a.png', figsize=(4,4), xmax=0, ymax=0 )
##a_3d.axes_labels( [ '$a(u_0,u)$', '$a(u_1,u)$', '$k(u)' ] )
#a_3d.save( 'maclev-2-2-a-c-a-vs-k.png' )

print 'plot a vs. a with arrows'
sys.stdout.flush()

def a_arrow( base, vec, scale=1, **args ):
    #ltx.write( 'arrow: $%s \\to %s%s$\n\n' % (latex(base),latex(scale),latex(vec)) )
    return arrow( (base[1], base[2]), (base[1] + scale*vec[1], base[2] + scale*vec[2]), **args )

a_phase_plane_annotated = a_phase_plane

#A01 = A_to_u_bindings( lv_adap_c.A(0) )[2] # a(u_0, u_1)
#import numpy
#grid_range = numpy.arange(0,1.01,0.1)
#for u_val in grid_range:
    # hold u_1=u_val and vary u_0
    #a_phase_plane_annotated += parametric_plot(
    #    ( Bindings( { u_1:u_0 } )(A01),                # a(u_0,u_0)
    #      Bindings( { u_1:u_0 } )( Bindings( { u_0:u_val } )(A01) ) ), # a(u_1,u_0)
    #    (u_0,0,1), color=hue( 0, 0, 0.8 ) )
    #a_phase_plane_annotated += parametric_plot(
    #    ( Bindings( { u_1:u_val } )(A01),              # a(u_0,u_1)
    #      Bindings( { u_0:u_val, u_1:u_val } )(A01) ), # a(u_1,u_1)
    #    (u_0,0,1), color=hue( 0, 0, 0.8 ) )
    # hold u_0=u_val and vary u_1
    #a_phase_plane_annotated += parametric_plot(
    #    ( Bindings( { u_0:u_val, u_1:u_val } )(A01),   # a(u_0,u_0)
    #      Bindings( { u_0:u_1 } )( Bindings( { u_1:u_val } )(A01) ) ), # a(u_1,u_0)
    #    (u_1,0,1), color=hue( 0, 0, 0.8 ) )
    #a_phase_plane_annotated += parametric_plot(
    #    ( Bindings( { u_0:u_val } )(A01),              # a(u_0,u_1)
    #      Bindings( { u_0:u_1 } )(A01) ),              # a(u_1,u_1)
    #    (u_1,0,1), color=hue( 0, 0, 0.8 ) )

last_t = -oo
scale = 1/12
vectors = dict()
for p in c_evolution._timeseries:
    next_t = p[t]
    pp = Bindings( p )
    if next_t >= last_t + 0.1:
        last_t = next_t
        for i in (0,1):
            if not i in vectors:
                vectors[i] = ( A_to_u_bindings( lv_adap_c.A(i) ),
                    A_to_u_bindings( lv_adap_c.S(lv_adap_c.A(i)) ),
                    A_to_u_bindings( lv_adap_c.direct_effect(i) ),
                    A_to_u_bindings( lv_adap_c.indirect_effect(i) ),
                    A_to_u_bindings( lv_adap_c.dAdt(i) ) )
            (Ai, SAi, Di, Ii, dAdti) = vectors[i]
            # check equality
            #print ( '$D(%s) + I(%s) = %s \\overset{?}{=} \\frac{dA(u)}{du} = %s$\n\n' % (
            #        latex(i), latex(i), latex(
            #          pp( A_to_u_bindings( Di ) ) +
            #          pp( A_to_u_bindings( Ii ) )
            #        ), latex(
            #          pp( A_to_u_bindings( dAdti ) )
            #        ) ) )
            S_A_arrow = a_arrow(
                pp( Ai ),
                pp( SAi ),
                scale=scale, color='red' )
            D_arrow = a_arrow(
                pp( Ai ),
                pp( Di ),
                scale=scale, color='green' )
            I_arrow = a_arrow(
                pp( Ai + Di.apply_map( lambda x:x*scale ) ),
                pp( Ii ),
                scale=scale, color='purple' )
            dA_du_arrow = a_arrow(
                pp( Ai ),
                pp( dAdti ),
                scale=scale, color='blue' )
            a_phase_plane_annotated += S_A_arrow + D_arrow + I_arrow + dA_du_arrow

a_phase_plane_annotated.axes_labels( [ '$a(u_0,\cdot)$', '$a(u_1,\cdot)$' ] )
a_phase_plane_annotated.save( 'maclev-2-2-a-c-a-arrows.png', figsize=(8,8)
    #, xmin=-0.6, xmax=-0.3, ymin=-0.6, ymax=-0.3
    , xmax=0, ymax=0
)

#stop there for now
ltx.close()
save_session('maclev-2-2-a-c-geom')
sys.exit()

ltx.close()
</source-file>

<project-file filename=maclev-2-2-a-c-geom.sage.out.html/>

And the motion of the Lotka-Volterra coefficients $$k$$ and $$a$$:

<project-file filename=maclev-2-2-a-c-k-vs-t.png />
<project-file filename=maclev-2-2-a-c-a-vs-t.png />

<project-file filename=maclev-2-2-a-c-Xhat-vs-t.png />
<project-file filename=maclev-2-2-a-c-a-vs-a.png />

<project-file filename=maclev-2-2-a-c-a-arrows.png />

{% comment %}<project-file filename=maclev-2-2-a-c-a-vs-k.png />{% endcomment %}

