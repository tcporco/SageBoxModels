---
layout: page
title: "Adaptive Geometry and Resource Competition: Two Species, Two Resources"
wmd_project: Selection_Gradients
---

This page investigates the adaptive dynamics of [the Macarthur-Levins resource competition model](MacLev.html) in the case of two species and two resources.

* See [Selection_Gradients/MacLev](MacLev.html) for the general model, and the adaptive dynamics formulation we're using here, including the specific questions about the $$a$$ and $$k$$ of the Lotka-Volterra framework.
* See also [Adaptive Geometry and Resource Competition - One Species, One Resource](MacLev-1-1.html).

We begin by creating and testing a 2-species, 2-resource model.  

<source-file filename=maclev_2_2_defs.py.step lang=python>
# requires: maclevmodels.py $(SageDynamics)/dynamicalsystems.py
from sage.all import *
from sage.misc.latex import _latex_file_

import os
import sys
sys.path.append( os.environ['SageUtils'] )
sys.path.append( os.environ['SageDynamics'] )
sys.path.append( os.environ['SageAdaptiveDynamics'] )
from dynamicalsystems import *
from adaptivedynamics import *
from latex_output import *
from maclevmodels import *

# Create the generic 2-species, 2-resources MacLev model, with parameters
# b_i, m_i, c_ij

rescomp = ResourceCompetitionModel( x_indices = [0, 1], r_indices = [0, 1] )

maclev = MacArthurLevinsModel( x_indices = [0, 1], r_indices = [0, 1] )

# create global variables for convenience
r_0, r_1, K_0, K_1, w_0, w_1 = SR.var( 'r_0, r_1, K_0, K_1, w_0, w_1' )
X_0, X_1, R_0, R_1 = SR.var( 'X_0, X_1, R_0, R_1' )

numeric_params = Bindings(
  { r_0: 1, r_1: 1,
    w_0: 1, w_1: 1,
    K_0: 2, K_1: 2 } )

# Create variables and bindings for doing adaptive dynamics of this model:
# map b, m, c to functions of phenotype variables u_i

u_indexer = indexer('u')
u_0, u_1 = (u_indexer[0], u_indexer[1])
gamma = SR.var( 'gamma' )

def linear_c_func(i,j):
    return j + (1 - 2*j)*u_indexer[i]

def linear_bindings(indices):
    return Bindings( dict(
        (rescomp._indexers['c'][i][j], linear_c_func(i,j))
        for i in indices for j in (0,1) ) )

def quadratic_c_func(i,j):
    if j == 0:
        return 1/(1 + u_indexer[i]**2*5)
    if j == 1:
        return 1/(1 + (u_indexer[i]-1)**2*5)
    return -inf

def quadratic_bindings(indices):
    return Bindings( dict(
        [ (rescomp._indexers['c'][i][0], quadratic_c_func(i,0))
          for i in indices
        ] +
        [ (rescomp._indexers['c'][i][1], quadratic_c_func(i,1))
          for i in indices
        ] +
        [ (rescomp._indexers['b'][i], 1) for i in indices ] +
        [ (rescomp._indexers['m'][i], 1) for i in indices ]
    ) )

exp_focus = 3 #0.25
def exponential_c_func(i,j):
    if j == 0 or j == 1:
        return exp( -(u_indexer[i] - j)**2 * exp_focus )
    return -oo

def make_bindings( c_func, indices ):
    return Bindings( dict(
        [ (rescomp._indexers['c'][i][0], c_func(i,0))
          for i in indices
        ] +
        [ (rescomp._indexers['c'][i][1], c_func(i,1))
          for i in indices
        ]
    ) )

bm_bindings = Bindings( dict(
    [ (rescomp._indexers['b'][i], 1) for i in (0,1,'i') ] +
    [ (rescomp._indexers['m'][i], 1) for i in (0,1,'i') ]
) )

integrate_popdyn_to = 30
integrate_adapdyn_to = 1
integrate_adapdyn_step = 0.02

which_model = 'quadratic'

if which_model == 'linear':
    c_func = linear_c_func
    c_bindings = make_bindings( c_func, (0,1,'i') )
    bmc_bindings = bm_bindings + c_bindings
    initial_conditions = Bindings( {
        # in a .sage file, could just write u_0: 1/3
        # in a .py, fractions need special care
        u_0 : Rational('2/5'),
        u_1 : Rational('4/7')
    } )
    integrate_popdyn_to = 500
elif which_model == 'quadratic':
    c_func = quadratic_c_func
    c_bindings = make_bindings( c_func, (0,1,'i') )
    bmc_bindings = bm_bindings + c_bindings
    initial_conditions = Bindings( {
        u_0 : Rational('1/3'),
        u_1 : Rational('4/9')
    } )
elif which_model == 'exponential':
    c_func = exponential_c_func
    c_bindings = make_bindings( c_func, (0,1,'i') )
    bmc_bindings = bm_bindings + c_bindings
    initial_conditions = Bindings( {
        u_0 : Rational('1/4'),
        u_1 : Rational('3/4'),
    } )
    integrate_adapdyn_to = 5
    integrate_adapdyn_step = 0.1

gamma_bindings = Bindings( { gamma: 1 } )

ad_bindings = bmc_bindings + gamma_bindings

</source-file>

<source-file filename=maclev-2-2-popdyn.sage.step lang=sage>
# requires: maclev_2_2_defs.py
# requires: $(SageDynamics)/dynamicalsystems.py maclevmodels.py
# produces: maclev-2-2-popdyn.sage.out.tex maclev-2-2-popdyn.sobj
# produces: maclev-2-2-popdyn.png maclev-2-2-r-zngis.png maclev-2-2-c-vs-u.png 
from maclev_2_2_defs import *

print 'start'
sys.stdout.flush()

ltx = latex_output( 'maclev-2-2-popdyn.sage.out.tex' )

ltx.write( 'The Mac-Lev model in generic form: ' )
ltx.write_block( maclev )

print 'apply bindings:', ad_bindings
sys.stdout.flush()

ltx.write( 'The Mac-Lev model with $b, m$, and $c$ bound to functions of $u$:\n' )
ltx.write_block( maclev.bind( ad_bindings ) )

print 'plot state space'
sys.stdout.flush()

maclev_initial_system = maclev.bind( ad_bindings + numeric_params + initial_conditions )
p = maclev_initial_system.plot_vector_field( (X_0, 0, 2), (X_1, 0, 2), color="gray", figsize=(5,5) )
p += maclev_initial_system.plot_ZNGIs( (X_0, 0, 2), (X_1, 0, 2), color="gray" )
s = maclev_initial_system.solve( [0, 0.02, 0.05], end_points=integrate_popdyn_to )
p += s.plot( X_0, X_1, color='red' )
p.save( 'maclev-2-2-popdyn.png' )

rescomp_initial_system = maclev._rescomp_model.bind( ad_bindings + numeric_params + initial_conditions )
rescomp_initial_system.plot_R_ZNGIs( filename='maclev-2-2-r-zngis.png', figsize=(4,4), ymin=0, ymax=4, xmin=0, xmax=4 )

print 'plot c vs u' 
sys.stdout.flush()

c_curve = plot( c_func( 0, 0 ), (u_0, 0, 1) )
c_curve += plot( c_func( 1, 1 ), (u_1, 0, 1), color="green" )
c_curve += point( initial_conditions( vector( [ u_0, c_func( 0, 0 ) ] ) ), color='blue', size=30 )
c_curve += point( initial_conditions( vector( [ u_0, c_func( 0, 1 ) ] ) ), color='blue', size=30 )
c_curve += point( initial_conditions( vector( [ u_1, c_func( 1, 0 ) ] ) ), color='red', size=30 )
c_curve += point( initial_conditions( vector( [ u_1, c_func( 1, 1 ) ] ) ), color='red', size=30 )
c_curve.axes_labels( [ '$u$', '$c_i(u)$' ] )
c_curve.save( 'maclev-2-2-c-vs-u.png', figsize=(4,4), ymin=0 )

# analysis

def analysis():
    maclev_abstract = maclev.bind( numeric_params )

    interior_eq = maclev_abstract.interior_equilibria()
    if len(interior_eq) == 0:
        ltx.write( "??? No interior equilibria?" )
    elif len(interior_eq) > 1:
        ltx.write( "??? Multiple interior equilibria ", latex(interior_eq) )
    else:
        generic_eq = column_vector( [ hat(X_0), hat(X_1) ] )
        interior_eq = Bindings( interior_eq[0] )( generic_eq )
        print 'interior eq:', interior_eq
        coexistence_criteria = solve( [ x > 0 for x in interior_eq ], [ maclev._rescomp_model._indexers['c'][i][j] for i in (0,1) for j in (0,1) ] )
        print 'coexistence criteria:', coexistence_criteria
        for soln in coexistence_criteria:
            ltx.write( 'One coexistence solution:\n' )
            for crit in soln:
                ltx.write_block(crit)

    ltx.write( "The coexistence criteria depend on the invasion rates at the boundary equilibria.\n\n" )

    for x_inv, x_res in ( (X_0, X_1), (X_1, X_0) ):
        assume( x_res > 0 )
        assume( x_inv == 0 )
        boundary_solutions = solve( maclev_abstract._flow[x_res] == 0, x_res, solution_dict=True )
        forget()
        if ( len( boundary_solutions ) != 1 ):
            raise Exception( 'wrong number of boundary solutions' )
        boundary_solution = boundary_solutions[0]
        #ltx.write_block( x_res.subs( boundary_solution ) )
        ltx.write( "Invasion of $%s$:\n" % latex( x_inv ) )
        inv_rate_abstract = maclev_abstract._flow[x_inv] / x_inv
        #ltx.write_block( inv_rate_abstract > 0 )
        inv_rate = inv_rate_abstract.subs( boundary_solution ).subs( { x_inv: 0 } )
        ltx.write_block( inv_rate.full_simplify() > 0 )

    rescomp_abstract = rescomp.bind( numeric_params )

    ltx.write( "But those invasion criteria are really about the resources.\n" ) # The resource levels are:\n" )
    ltx.write( latex( rescomp_abstract ) )

    for x_inv, x_res in ( (X_0, X_1), (X_1, X_0) ):
        #assume( x_res > 0 )
        #assume( x_inv == 0 )
        assume( R_0 > 0, R_1 > 0 )
        boundary_solutions = solve( [ rescomp_abstract._flow[v] == 0 for v in (x_res, R_0, R_1) ] + [ x_inv == 0 ], [ x_res, x_inv, R_0, R_1 ], solution_dict=True )
        forget()
        #ltx.write( "boundary solutions: $%s$\n" % latex(boundary_solutions) )
        boundary_solutions = [ s for s in boundary_solutions if s[x_res] != 0 ]
        if ( len( boundary_solutions ) != 1 ):
            raise Exception( 'wrong number of boundary solutions' )
        boundary_solution = boundary_solutions[0]
        ltx.write( "Here's a boundary solution: %s\n\n" % latex( Bindings( boundary_solution ) ) )
        #ltx.write_block( x_res.subs( boundary_solution ) )
        ltx.write( "Invasion condition for $%s$:\n" % latex( x_inv ) )
        inv_rate_abstract = rescomp_abstract._flow[x_inv] / x_inv
        #ltx.write_block( inv_rate_abstract > 0 )
        inv_rate = inv_rate_abstract.subs( { x_inv: 0 } )
        ltx.write_block( inv_rate.full_simplify() > 0 )

    ltx.write( "In our initial model, $c$ values are" )
    for i in ( 0, 1 ):
        for j in ( 0, 1 ):
            cij = rescomp_abstract._indexers['c'][i][j]
            ncij = (initial_conditions + bmc_bindings)( cij )
            ltx.write_block( cij, '=', ncij, '=', N(ncij, digits=4) )

# analysis()
ltx.close()

save_session('maclev-2-2-popdyn')
</source-file>

The model equations, according to Sage:

<project-file filename=maclev-2-2-popdyn.sage.out.html/>

State space of this population dynamics model:

<project-file filename="maclev-2-2-popdyn.png"/>

ZNGI mutual invasion diagram.  Write more about this here.

<project-file filename="maclev-2-2-r-zngis.png"/>

Here are the $$c$$ functions for the two resources. The above plots are
of the community that starts off the adaptive dynamics below.  That
community's two residents are marked on this plot as well.

<project-file filename=maclev-2-2-c-vs-u.png />


## Adaptive dynamics of $$u$$

<source-file filename=maclev-2-2-adap.sage.step lang=sage>
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageAdaptiveDynamics)/adaptivedynamics.py maclevmodels.py
# requires: maclev-2-2-popdyn.sobj maclev_2_2_defs.py
# produces: maclev-2-2-adap.sage.out.tex maclev-2-2-adap.sobj
# produces: maclev-2-2-u-vs-t.png
# produces: maclev-2-2-u-vs-u.png
from maclev_2_2_defs import *

load_session( 'maclev-2-2-popdyn' )

ltx = latex_output( 'maclev-2-2-adap.sage.out.tex' )

ltx.write( 'maclev anyone? ' )
ltx.write_block( maclev )

ltx.write( 'and with the functional and numeric bindings: ' )
ltx.write_block( maclev.bind( ad_bindings + numeric_params ) )

# I don't trust FunctionBindings any more, but I need to use it briefly
# to get tractable adaptive dynamics here.
# (see http://trac.sagemath.org/ticket/17503 and
# http://trac.sagemath.org/ticket/17504)
bmc_to_fn_bindings = Bindings( dict(
    [ ( maclev._rescomp_model._indexers['c'][i][j],
        function( 'c_%s'%j )( u_indexer[i] ) )
      for i in (0,1,'i') for j in (0,1) ] +
    [ ( maclev._rescomp_model._indexers['b'][i], function('b')( u_indexer[i] ) ) for i in (0,1,'i') ] +
    [ ( maclev._rescomp_model._indexers['m'][i], function('m')( u_indexer[i] ) ) for i in (0,1,'i') ]
    ) )
bmc_from_fn_bindings = Bindings( FunctionBindings( dict(
    [ ( function( 'c_%s'%j ), c_func(0,j).function( u_indexer[0] ) )
        for j in (0,1) ] +
    [ ( function( 'b' ), SR(1) ), ( function('m'), SR(1) ) ]
    ) ) )

#print 'bmc_to_fn_bindings:', bmc_to_fn_bindings
#print 'bmc_from_fn_bindings:', bmc_from_fn_bindings

#ltx.write( 'Coexistence criteria in $u$:\n' )

#for soln in coexistence_criteria:
#    ltx.write( 'One coexistence solution:\n' )
#    for crit in soln:
#        ltx.write_block( bmc_to_fn_bindings( crit ) )

#coexistence_criteria_u = (bmc_to_fn_bindings + bmc_from_fn_bindings)( coexistence_criteria )
#print 'u criteria:', coexistence_criteria_u

#print "construct adaptive dynamics"
#sys.stdout.flush()

try:
    maclev_adap_c = NumericalAdaptiveDynamicsModel( maclev,
        [ u_indexer ],
        early_bindings=bmc_to_fn_bindings,
        late_bindings=bmc_from_fn_bindings + ad_bindings + numeric_params,
        equilibrium_function = find_interior_equilibrium )
    #ltx.write( maclev_adap_c._debug_output._output._str )
    ltx.write( 'adaptive dynamics of $u_\cdot$ in that model:' )
    ltx.write_block( maclev_adap_c )

    print ( 'find adaptive dynamics equilibria' )
    sys.stdout.flush()

    ltx.write( 'equilibria:' )
    adap_equilibria = maclev_adap_c.equilibria( ranges={ u_0:(0.1,0.4,0.6,0.9), u_1:(0.1,0.4,0.6,0.9) } )
    for eq in adap_equilibria:
        ltx.write_block( eq )

    print 'construct u vector field plot'
    sys.stdout.flush()

    # plot phase plane of u vs u
    u_phase_plane = maclev_adap_c.plot_vector_field( (u_0,0,1), (u_1,0,1), color='gray', plot_points=(19,20) )
    for eq in adap_equilibria:
        print 'eq',eq
        print 'eq u_0', Bindings( eq )( hat(u_0) )
        u_phase_plane += point( Bindings( eq )( vector( [ hat(u_0), hat(u_1) ] ) ), color='black', size=30 )

    print 'solve'
    sys.stdout.flush()

    try:
        c_evolution = maclev_adap_c.solve( [0, initial_conditions( u_0 ), initial_conditions( u_1 ) ], end_points=integrate_adapdyn_to, step=integrate_adapdyn_step )

        print 'plot u vs t'
        sys.stdout.flush()

        # and plot u vs t
        t = maclev_adap_c.time_variable()
        u_timeseries = c_evolution.plot( t, u_0 )
        u_timeseries += c_evolution.plot( t, u_1, color='red' )
        u_timeseries.axes_labels( [ '$t$', '$u$' ] )
        u_timeseries.save( 'maclev-2-2-u-vs-t.png', figsize=(4,4) )

        print 'plot u vs u'
        sys.stdout.flush()
        u_phase_plane += c_evolution.plot( u_0, u_1 )
    except AdaptiveDynamicsException, e:
        print( 'AdaptiveDynamicsException: %s' % e )
        print 'Failed to integrate adaptive dynamics'
        sys.stdout.flush()
        ltx.write( e._latex_str or '', r'\\Exception: %s\\' % e )

    u_phase_plane.axes_labels( [ '$u_0$', '$u_1$' ] )
    u_phase_plane.save( 'maclev-2-2-u-vs-u.png', xmin=0, xmax=1, ymin=0, ymax=1,
        figsize=(4,4) )
except AdaptiveDynamicsException, e:
    print( 'AdaptiveDynamicsException: %s' % e )
    print 'Failed to construct adaptive dynamics'
    sys.stdout.flush()
    ltx.write( e._latex_str or '', r'\\Exception: %s\\' % e )

ltx.close()
save_session( 'maclev-2-2-adap' )
try:
    c_evolution
except NameError:
    sys.exit( int(1) )
print 'done'
sys.exit()
</source-file>

Here we derive the adaptive dynamics equations when it is the uptake rates $$c_{ij}$$ that is evolving -- that is, when $$c_{ij}=c_j(u_i)$$, $$b_0=1$$, and $$m_0=1$$; and then we bind the remaining parameters to get a realization of the system that we can integrate and plot.

<project-file filename=maclev-2-2-adap.sage.out.html/>

With these parameters, what happens to the evolving traits $$u$$?

<project-file filename=maclev-2-2-u-vs-t.png /> <project-file filename=maclev-2-2-u-vs-u.png />

## Adaptive Geometry: Ecological quantities $$m$$, $$b$$, and particularly $$c$$

<source-file filename=maclev-2-2-p.sage.step>
# requires: $(SageDynamics)/dynamicalsystems.py $(SageUtils)/latex_output.py
# requires: $(SageAdaptiveDynamics)/adaptivedynamics.py maclevmodels.py
# requires: maclev_2_2_defs.py maclev-2-2-adap.sobj
# produces: maclev-2-2-p.sage.out.tex maclev-2-2-c-vs-t.png
# produces: maclev-2-2-c-vs-c.png maclev-2-2-total-c-vs-u.png
from maclev_2_2_defs import *

load_session( 'maclev-2-2-adap' )

ltx = latex_output( 'maclev-2-2-p.sage.out.tex' )

p_indexers = [ indexer('b'), indexer('m') ] + [ indexer_2d_reverse('c')[j] for j in maclev._rescomp_model._r_indices ]

maclev_p = maclev.bind( numeric_params )
maclev_adap_p = AdaptiveDynamicsModel(
    maclev_p,
    p_indexers,
    equilibrium=Bindings( maclev_p.interior_equilibria()[0] ) )

print 'adaptive dynamics of b, m, c:', maclev_adap_p

if True:
    ltx.write('adaptive dynamics of $b$, $m$, $c$:')
    for i in maclev._population_indices:
        ltx.write_block(
            column_vector( [ pi[i] for pi in p_indexers ] ),
            wrap_latex( r'\to' ),
            maclev_p._bindings( column_vector( [ maclev_adap_p._S[pi[i]] for pi in p_indexers ] ) ) )
    ltx.write( 'and note\n' )
    rhats = column_vector( [ hat( maclev_p._rescomp_model._indexers['R'][i] ) for i in maclev_p._rescomp_model._r_indices ] )
    ltx.write_equality( rhats, maclev_p._bindings( rhats ) )
    ltx.write( 'so that when $b_0=b_1=1$, $S(\mathbf{c}_0)=S(\mathbf{c}_1)=\hat{\mathbf{R}}$.\n\n' )
    ltx.write( '(Also, ' ) 
    #xhats = column_vector( maclev_p.equilibrium_vars() )
    #ltx.write_equality( xhats, maclev_adap_p._equilibrium( xhats ) )
    ltx.write( 'the selection gradient on $b_i$ is directly from the '
        '$\\frac{dX_i}{dt}$ equation, and can be seen to be equal to 0.)\n' )

def make_arrow( base, vec, scale=1, **args ):
    #print 'arrow: $%s \\to %s%s$' % (latex(base),latex(scale),latex(vec))
    arr = arrow( (base[0], base[1]), (base[0] + scale*vec[0], base[1] + scale*vec[1]), **args )
    #print [ aa for aa in arr ]
    return arr

print 'plot c vs t'
sys.stdout.flush()

c_timeseries = Graphics()
c = rescomp._indexers['c']
for i in maclev._population_indices:
    c_timeseries += c_evolution.plot( 't', c[i][0], color=[ 'blue', 'red' ][i] )
    c_timeseries += c_evolution.plot( 't', c[i][1], color=[ 'blue', 'red' ][i] )

c_timeseries.axes_labels( [ '$t$', '$c$' ] )
c_timeseries.save( 'maclev-2-2-c-vs-t.png', figsize=(4,4) )

# plot c_1 vs c_0, with arrows

print 'plot c vs c'
sys.stdout.flush()

# first put in the curves in the c_0-c_1 plane
c_phase_plane = Graphics()
c_phase_plane += parametric_plot( (c_func( 0, 0 ), c_func( 0, 1 )), (u_0, 0, 1), color='gray' )
for i in maclev._population_indices:
    c_phase_plane += c_evolution.plot( c[i][0], c[i][1], color=[ 'blue', 'red' ][i] )

# then add the arrows at intervals of 0.1 time step
last_t = -oo
maclev_bindings = ad_bindings + numeric_params
for p in c_evolution._timeseries:
    pp = Bindings(p)
    t = N( pp( c_evolution._system._time_variable ) )
    if t >= last_t + 0.1:
        last_t = t
        dudt = maclev_adap_c._bindings( column_vector( maclev_adap_c.compute_flow(
            [ pp( ui ) for ui in maclev_adap_c._vars ],
            t ) ) )
        eq = maclev_adap_c.equilibrium_function( pp )
        for i in maclev._population_indices:
            ci = [ rescomp._indexers['c'][i][0], rescomp._indexers['c'][i][1] ]
            # the vector S(c)
            c_phase_plane += make_arrow(
                [ pp( maclev_bindings( eq( cij ) ) ) for cij in ci ],
                [ pp( maclev_bindings( eq( maclev_adap_p._S[ cij ] ) ) ) for cij in ci ],
                0.05, color=[ 'blue', 'red' ][i] )
            # the vector dc/dt
            dci = [ diff( ad_bindings( cij ), u_indexer[i] ) for cij in ci ]
            #print dudt, dci
            #print [ pp( dcij * dudt[i] ) for dcij in dci ]
            c_phase_plane += make_arrow(
                [ pp( ad_bindings( cij ) ) for cij in ci ],
                [ pp( dcij * dudt[i] ) for dcij in dci ],
                0.05, color='green' )

c_phase_plane.axes_labels( [ '$c_0$', '$c_1$' ] )
c_phase_plane.save( 'maclev-2-2-c-vs-c.png', figsize=(4,4) )

print 'plot total c vs u' 
sys.stdout.flush()

c_curve = plot( c_func( 0, 0 ) + c_func( 0, 1 ), (u_0, 0, 1) )
c_curve += point( initial_conditions( vector( [ u_0, c_func( 0, 0 ) + c_func( 0, 1 ) ] ) ), color='blue', size=30 )
c_curve += point( initial_conditions( vector( [ u_1, c_func( 1, 0 ) + c_func( 1, 1 ) ] ) ), color='red', size=30 )
c_curve.axes_labels( [ '$u$', '$c_0(u) + c_1(u)$' ] )
c_curve.save( 'maclev-2-2-total-c-vs-u.png', figsize=(4,4), ymin=0 )

ltx.close()
save_session( 'maclev-2-2-p' )
</source-file>

<project-file filename=maclev-2-2-p.sage.out.html/>

Here is the motion of $$c_0(u)$$ and $$c_1(u)$$ as the two
populations' trait values $$u_i$$ change.
The velocity of this $$\mathbf{c}=(c_0, c_1)$$ vector is given by the
chain rule:
$$ \frac{d\mathbf{c}}{dt} = \frac{d\mathbf{c}}{du}\frac{du}{dt} $$, etc.

Green arrows are the true velocity $$\frac{d\mathbf{c}}{dt}$$, while the red and blue arrows are the selection gradient $$S(\mathbf{c})$$, the direction $$\mathbf{c}$$ would be drawn if it were not constrained.

By the [general analysis of adapting constrained phenotypes](MacLev.html),
the motion of the vector $$(c_0(u), c_1(u))$$ is predicted by the projection
of the vector's selection gradient $$S(\mathbf{c})$$ onto the tangent of the
curve, $$\frac{d\mathbf{c}}{du}$$.

<project-file filename=maclev-2-2-c-vs-t.png />
<project-file filename=maclev-2-2-c-vs-c.png />

It would be good to develop a complete geometric analysis of the dynamics
of one and two species for all possible functions $$c_j(u)$$, $$b(u)$$,
and $$m(u)$$.  For the moment, I'll simplify by holding
$$b$$ and $$m$$ constant, to study the $$c$$ values, which are key to the
questions that interest me about interactions, and by requiring the $$c$$
functions to be symmetric, in the sense that $$c_1(u) = c_0(1-u)$$.

In this case, the geometric interpretation of the development of
$$\mathbf{c}$$ using the selection gradient $$S(\mathbf{c})$$ allows a
concise analysis of the dynamics.

As in the above picture, the selection gradient is the resource vector
$$(\hat{R}_0, \hat{R}_1)$$.  Because of the symmetric form of $$c$$, when
the phenotypes are symmetrically matched, with $$u_1 = 1 - u_0$$, the
population dynamics is symmetric and $$\hat{R}_0 = \hat{R}_1$$.

Geometrically, this means that in this case the selection gradient is a multiple of
$$(1,1)$$.  The curve $$(c_0(u),c_1(u))$$ that is shown in the plot above
is symmetric across the diagonal by assumption.  So the pair of points
parametrized by $$u_0$$ and $$1-u_0$$ will always be mirror images across
the diagonal and will either adapt toward the diagonal together, or away
from it together.

As a consequence, the pair can either be attracted to the center point
$$(\frac12, \frac12)$$ or repelled by it -- depending only on whether
the curve $$(c_0(u), c_1(u))$$ curves upward or downward where it meets
the diagonal.  When $$(\frac12, \frac12)$$ is
repelling, the community will either be attracted to a dimorphic equilibrium
$$(u, 1-u)$$ with $$u\not=\frac12$$, or will undergo an extinction and
collapse to a single-population system, with its different dynamics.
(With a complex enough function
$$c_0(u)$$ it could possibly have multiple dimorphic equilibria, but all
would be of the form $$(u, 1-u)$$).

When $$(\frac12, \frac12)$$ is repelling to a pair of populations, it would
be good to work out when it's attracting to a single population, which
would make it an evolutionary branching point.

Experiment: How well does this curve predict the outcome?

<project-file filename=maclev-2-2-total-c-vs-u.png/>

Pretty well, I suspect. If the $$u$$ values are symmetrically chosen
($$u_1 = 1-u_0$$) then they rise away from or toward the center point.
Conjecture: the stability of the center point of the
2-species system with $$c_1(u)=c_0(1-u)$$ is equivalent to the stability of
the 1-dimensional system $$du/dt = c_0'(u) + c_0'(1-u)$$ at $$u=\frac12$$.

Since this is the second derivative $$d^2/du^2(c_0(u)+c_0(1-u)$$, which is
equal in sign to $$d^2/du^2(c_0)$$, that should be all it takes to predict that
stability. And is there an equally simple criterion for whether the center
point attracts a single population?

Partial to do list:

* dynamics of one species on two resources
* literature review.  That Kisdi paper, for instance, comes from studying this kind of system.  Tilman book is on order.
* dynamics when $$c_{ij}$$ mutate independently, unconstrained by $$u$$

<source-file filename=maclev-2-2-zngi.sage.step lang=sage>
# requires: maclev_2_2_defs.py maclev-2-2-adap.sobj
# produces: maclev-2-2-zngi.sage.out.tex maclev-2-2-zngi-animation.gif
from maclev_2_2_defs import *

load_session( 'maclev-2-2-adap.sobj' )

ltx = latex_output( 'maclev-2-2-zngi.sage.out.tex' )

rescomp_abstract = rescomp.bind( numeric_params )
rescomp_initial = rescomp_abstract.bind( bmc_bindings, initial_conditions )

def zngi_R1( x ):
    assume( R_0 > 0, R_1 > 0 )
    zngi = solve( rescomp_abstract._flow[x] == 0, R_1, solution_dict=True )[0][R_1]
    forget()
    return numeric_params( zngi )

zngi_generic_parametric = (rescomp_abstract._flow[X_0]/X_0) == 0
u = SR('u')
zngi_generic_parametric = bmc_bindings( zngi_generic_parametric ).subs( { u_0:u } )

zngis_generic = [ zngi_R1( x ) for x in ( X_0, X_1 ) ]
#ltx.write( "zngis:\n" )
#for z in zngis_generic:
#	ltx.write_block( R_1 == z )
#ltx.write( "R intercepts are:\n" )
#for z in zngis_generic:
#	R1int = solve( z, R_0, solution_dict=True )[0][R_0]
#	ltx.write_block( [ (R1int, 0), (0, z.subs( { R_0: 0 } )) ] )

zngis_numeric = [
    [ Bindings(p)( bmc_bindings( r ) ) for r in zngis_generic ]
    for p in c_evolution._timeseries ]

rmax = [
    [ solve( r1, R_0, solution_dict=True )[0][R_0] for r1 in zs ]
    for zs in zngis_numeric ]

plot_line_args = dict( ymin=0, ymax=4, xmax=4, figsize=(5,5), color='gray' )
plot_fill_args = dict( plot_line_args, fill=True, fillcolor='gray', fillalpha=0.3, thickness=2 )

ltx.write( 'generic ZNGI curve:' )
ltx.write_block( zngi_generic_parametric )

envelope_condition = diff( zngi_generic_parametric, u )
ltx.write( 'envelope condition:' )
ltx.write_block( envelope_condition )

envelope_curves = solve( [ zngi_generic_parametric, envelope_condition ], [ R_0, R_1 ], solution_dict=True )
envelope_curve = [ envelope_curves[0][r] for r in (R_0,R_1) ]
envelope_plot = parametric_plot( envelope_curve, (u,0.02,0.98) )

ltx.write( 'And the $(R_0,R_1)$ solution of those together is the envelope curve:' )
ltx.write_block( envelope_curve )

def main():
    zplot = Graphics()
    anima = []

    print 'create frames'; sys.stdout.flush()
    for zs, r0s in zip(zngis_numeric, rmax):
        frame = envelope_plot
        for r1, r0max in zip(zs, r0s):
            frame += plot( r1, (R_0, 0, r0max), **plot_fill_args )
            zplot += plot( r1, (R_0, 0, r0max), **plot_line_args )
        frame.axes_labels( [ '$%s$'%latex(r) for r in (R_0, R_1) ] )
        anima += [ frame ]

    print 'create animate gif'; sys.stdout.flush()
    animation = animate( anima, xmin=0, xmax=4, ymin=0, ymax=4, figsize=(5,5) )
    animation.save( 'maclev-2-2-zngi-animation.gif' )
    return 0

if __name__ == '__main__':
    status = main()
else:
    status = 0

ltx.close()
save_session('maclev-2-2-zngi')
sys.exit(int(status))
</source-file>

<project-file filename=maclev-2-2-zngi.sage.out.html/>

<a name="ZNGI-animation"></a>
Here is an animation of the changing ZNGI curves of the
two species.  For each species, this is the curve of $$(R_0, R_1)$$
combinations for which it is at equilibrium, and the gray
region below is resource concentrations that are too low
for it.

<project-file filename="maclev-2-2-zngi-animation.gif"/>

The $$R_0$$- and $$R_1$$-intercepts of a given line are $$\frac{m_i}{c_{ji}}=\frac1{c_{ji}}$$
for that species $$i$$ and that resource $$j$$.
If the species's two $$c$$ values were allowed to vary independently, 
all diagonal lines would be available to it.
But since they are constrained by a single, scalar phenotype $$u$$,
a choice of $$c_0$$ determines the value of $$c_1$$ or vice versa.

The blue curve is a geometric summary of that constraint: all ZNGI lines
parametrized by the scalar $$u$$ are tangent to that curve (thank you, [Courant](http://www.amazon.com/Differential-Integral-Calculus-Volume-Set/product-reviews/0471588814/ref=cm_cr_dp_text?ie=UTF8&showViewpoints=0&sortBy=byRankDescending#R3LJKOYQ9TUWVZ)!).

The current resource concentration $$(R_0, R_1)$$ is the point of 
intersection of the two gray ZNGI lines.

Evolution proceeds by invasion into the gray region: each line "rolls"
along the blue (envelope) curve, in whichever direction places the current
resources $$(R_0, R_1)$$ in the white region above the line.

So to understand the dynamics of this evolution, and the conditions
responsible for [character displacement](https://en.wikipedia.org/wiki/Character_displacement), we'll want to understand the shape of that envelope
curve and how it relates to the form of the function $$c_j(u)$$.

Here is the time evolution of the resource concentrations $$(R_0, R_1)$$:

<project-file filename=maclev-2-2-Rhat-vs-t.png/>

## Adaptive Geometry: Community-structure measures $$a$$ and $$k$$

<source-file filename=maclev-2-2-geom.sage.step lang=sage>
# requires: $(SageDynamics)/dynamicalsystems.py $(SageUtils)/latex_output.py
# requires: $(SageAdaptiveDynamics)/adaptivedynamics.py maclevmodels.py 
# requires: lotkavolterra.py
# requires: maclev_2_2_defs.py maclev-2-2-adap.sobj
# produces: maclev-2-2-geom.sage.out.tex
# produces: maclev-2-2-k-vs-t.png maclev-2-2-a-vs-t.png
# produces: maclev-2-2-Xhat-vs-t.png maclev-2-2-Rhat-vs-t.png
# produces: maclev-2-2-a-vs-a.png
# produces: maclev-2-2-a-vs-k.png maclev-2-2-a-arrows.png
from maclev_2_2_defs import *
from lotkavolterra import *

load_session( 'maclev-2-2-adap' )

ltx = latex_output( 'maclev-2-2-geom.sage.out.tex' )

# I don't trust FunctionBindings any more, but I need to use it briefly
# to get tractable adaptive dynamics here.
bmc_to_fn_bindings = Bindings( dict(
    [ ( maclev._rescomp_model._indexers['c'][i][j],
        function( 'c_%s'%j )( u_indexer[i] ) )
      for i in (0,1,'i') for j in (0,1) ] +
    [ ( maclev._rescomp_model._indexers['b'][i], function('b')( u_indexer[i] ) ) for i in (0,1,'i') ] +
    [ ( maclev._rescomp_model._indexers['m'][i], function('m')( u_indexer[i] ) ) for i in (0,1,'i') ]
    ) )
bmc_from_fn_bindings = Bindings( FunctionBindings( dict(
    [ ( function( 'c_%s'%j ), c_func(0,j).function( u_indexer[0] ) )
        for j in (0,1) ] +
    [ ( function( 'b' ), SR(1) ), ( function('m'), SR(1) ) ]
    ) ) )

lv_adap_c = LotkaVolterraAdaptiveDynamics( maclev_adap_c, r_name='k' )

class SeriesOfBindings( Bindings ):
    def __init__( self, *args ):
        # this list of bindings will be applied from right to left
        self._series = args
    def substitute( self, expr ):
        return self.substitute_list( self._series, expr )
    def substitute_list( self, series, expr ):
        if not series: return expr
        return series[0]( self.substitute_list( series[1:], expr ) )
    def _latex_(self):
        from operator import add
        return reduce( add, map( latex, self._series ) )

A_to_u_bindings = SeriesOfBindings(
    bmc_bindings + numeric_params + ad_bindings
        + lv_adap_c._lv_model._A_bindings
        + lv_adap_c._adaptivedynamics._late_bindings
        + lv_adap_c._lv_model.interior_equilibrium_bindings(),
    lv_adap_c._phenotypes_from_fn_bindings,
    lv_adap_c.dudt_bindings(),
    lv_adap_c._phenotypes_to_fn_bindings )

print 'printing things in LaTeX'
sys.stdout.flush()

#ltx.write( 'A\_to\_u\_bindings is ' + latex( A_to_u_bindings ) )

ltx.write_equality( SR('A(0)'), lv_adap_c.A(0).column(), A_to_u_bindings( lv_adap_c.A(0).column() ) )
ltx.write_equality( SR('A(1)'), lv_adap_c.A(1).column(), A_to_u_bindings( lv_adap_c.A(1).column() ) )
ltx.write_equality( SR('S(A(0))'), lv_adap_c.S( lv_adap_c.A(0) ).column(), lv_adap_c._lv_model.interior_equilibrium_bindings()( lv_adap_c.S( lv_adap_c.A(0) ) ).column() )
ltx.write_equality( SR('S(A(1))'), lv_adap_c.S( lv_adap_c.A(1) ).column(), lv_adap_c._lv_model.interior_equilibrium_bindings()( lv_adap_c.S( lv_adap_c.A(1) ) ).column() ) 

ltx.write_equality( wrap_latex( 'D(u_0)' ), lv_adap_c.direct_effect(0).column()
    #, A_to_u_bindings( lv_adap_c.direct_effect(0) )
)
ltx._output.flush()
ltx.write_equality( wrap_latex( 'I(u_0)' ), lv_adap_c.indirect_effect(0).column()
    #, A_to_u_bindings( lv_adap_c.indirect_effect(0) )
)
ltx._output.flush()
ltx.write_equality( wrap_latex( r'\frac{dA}{dt}' ), lv_adap_c.dAdt(0).column()
    #, A_to_u_bindings( lv_adap_c.dAdt(0) )
)
ltx._output.flush()

print 'plot k vs. t'
sys.stdout.flush()

# plot k values vs. time
k_timeseries = Graphics();
for i in (0, 1):
    #print ( str( lv_adap_c._lv_model._indexers['r'][i] ) + ': ' +
        #str( A_to_u_bindings( lv_adap_c._lv_model._A_bindings( lv_adap_c._lv_model._indexers['r'][i] ) ) ) )
    k_timeseries += c_evolution.plot( t,
        A_to_u_bindings( lv_adap_c._lv_model._A_bindings( lv_adap_c._lv_model._indexers['r'][i] ) ),
        color=[ 'blue', 'red' ][i], figsize=(4,4) )
k_timeseries.axes_labels( [ '$t$', '$k(\cdot)$' ] )
k_timeseries.save( 'maclev-2-2-k-vs-t.png' )

print 'plot a vs. t'
sys.stdout.flush()

# plot interactions vs. time in Xmas colors
a_timeseries = Graphics()
for i in (0, 1):
    for j in (0, 1):
        a_timeseries += c_evolution.plot( t,
            A_to_u_bindings( lv_adap_c._lv_model._A_bindings( lv_adap_c._lv_model._indexers['a'][i][j] ) ), 
            color=(i == j and 'red' or 'lime'), figsize=(4,4) )
a_timeseries.axes_labels( [ '$t$', '$a(\cdot,\cdot)$' ] )
a_timeseries.save( 'maclev-2-2-a-vs-t.png' )

print 'plot X vs. t'
sys.stdout.flush()

# population size vs time
X_timeseries = Graphics()
for i in (0, 1):
    #print ( str( hat( lv_adap_c._lv_model._population_indexer[i] ) ) + ': ' +
        #str( A_to_u_bindings( lv_adap_c._lv_model.interior_equilibrium_bindings()( hat( lv_adap_c._lv_model._population_indexer[i] ) ) ) ) )
    X_timeseries += c_evolution.plot( t,
        A_to_u_bindings( lv_adap_c._lv_model.interior_equilibrium_bindings()( hat( lv_adap_c._lv_model._population_indexer[i] ) ) ),
        color=[ 'blue', 'red' ][i], figsize=(4,4) )
X_timeseries.axes_labels( [ '$t$', '$\hat{X}$' ] )
X_timeseries.save( 'maclev-2-2-Xhat-vs-t.png' )

print 'plot R vs. t'
sys.stdout.flush()

# population size vs time
R_timeseries = Graphics()
for i in (0, 1):
    ri = A_to_u_bindings( Bindings( { X_0: hat(X_0), X_1: hat(X_1) } )( maclev._bindings( SR('R_%s'%i) ) ) )
    #print ri
    #print Bindings( c_evolution._timeseries[0] )( ri )
    sys.stdout.flush()
    R_timeseries += c_evolution.plot( t, ri,
        color=[ 'blue', 'red' ][i], figsize=(4,4) )
R_timeseries.axes_labels( [ '$t$', '$\hat{R}$' ] )
R_timeseries.save( 'maclev-2-2-Rhat-vs-t.png' )

print 'plot a vs. a'
sys.stdout.flush()

# plot interactions in A space
a_phase_plane = Graphics()
#from sage.plot.plot3d.base import Graphics3d
#a_3d = Graphics3d()
for i in (0, 1):
    a_phase_plane += c_evolution.plot(
        A_to_u_bindings( lv_adap_c._lv_model._indexers['a'][i][0] ),
        A_to_u_bindings( lv_adap_c._lv_model._indexers['a'][i][1] ),
        color=[ 'blue', 'red' ][i] )
    #a_3d += c_evolution.plot3d(
        #A_to_u_bindings( lv_adap_c._lv_model._indexers['a'][i][0] ),
        #A_to_u_bindings( lv_adap_c._lv_model._indexers['a'][i][1] ),
        #A_to_u_bindings( lv_adap_c._lv_model._indexers['r'][i] ),
        #color=[ 'blue', 'red' ][i] )
a_phase_plane.axes_labels( [ '$a(u_0,\cdot)$', '$a(u_1,\cdot)$' ] )
a_phase_plane.save( 'maclev-2-2-a-vs-a.png', figsize=(4,4), xmax=0, ymax=0 )
##a_3d.axes_labels( [ '$a(u_0,u)$', '$a(u_1,u)$', '$k(u)' ] )
#a_3d.save( 'maclev-2-2-a-vs-k.png' )

print 'plot a vs. a with arrows'
sys.stdout.flush()

def a_arrow( base, vec, scale=1, **args ):
    #ltx.write( 'arrow: $%s \\to %s%s$\n\n' % (latex(base),latex(scale),latex(vec)) )
    return arrow( (base[1], base[2]), (base[1] + scale*vec[1], base[2] + scale*vec[2]), **args )

a_phase_plane_annotated = a_phase_plane

A01 = A_to_u_bindings( lv_adap_c.A(0) )[2] # a(u_0, u_1)
import numpy
grid_range = numpy.arange(0,1.01,0.1)
for u_val in grid_range:
    # hold u_1=u_val and vary u_0
    a_phase_plane_annotated += parametric_plot(
        ( Bindings( { u_1:u_0 } )(A01),                # a(u_0,u_0)
          Bindings( { u_1:u_0 } )( Bindings( { u_0:u_val } )(A01) ) ), # a(u_1,u_0)
        (u_0,0,1), color=hue( 0, 0, 0.8 ) )
    a_phase_plane_annotated += parametric_plot(
        ( Bindings( { u_1:u_val } )(A01),              # a(u_0,u_1)
          Bindings( { u_0:u_val, u_1:u_val } )(A01) ), # a(u_1,u_1)
        (u_0,0,1), color=hue( 0, 0, 0.8 ) )
    # hold u_0=u_val and vary u_1
    a_phase_plane_annotated += parametric_plot(
        ( Bindings( { u_0:u_val, u_1:u_val } )(A01),   # a(u_0,u_0)
          Bindings( { u_0:u_1 } )( Bindings( { u_1:u_val } )(A01) ) ), # a(u_1,u_0)
        (u_1,0,1), color=hue( 0, 0, 0.8 ) )
    a_phase_plane_annotated += parametric_plot(
        ( Bindings( { u_0:u_val } )(A01),              # a(u_0,u_1)
          Bindings( { u_0:u_1 } )(A01) ),              # a(u_1,u_1)
        (u_1,0,1), color=hue( 0, 0, 0.8 ) )

last_t = -oo
scale = 1/12
vectors = dict()
for p in c_evolution._timeseries:
    next_t = p[t]
    pp = Bindings( p )
    if next_t >= last_t + 0.1:
        last_t = next_t
        for i in (0,1):
            if not i in vectors:
                vectors[i] = ( A_to_u_bindings( lv_adap_c.A(i) ),
                    A_to_u_bindings( lv_adap_c.S(lv_adap_c.A(i)) ),
                    A_to_u_bindings( lv_adap_c.direct_effect(i) ),
                    A_to_u_bindings( lv_adap_c.indirect_effect(i) ),
                    A_to_u_bindings( lv_adap_c.dAdt(i) ) )
            (Ai, SAi, Di, Ii, dAdti) = vectors[i]
            # check equality
            #print ( '$D(%s) + I(%s) = %s \\overset{?}{=} \\frac{dA(u)}{du} = %s$\n\n' % (
            #        latex(i), latex(i), latex(
            #          pp( A_to_u_bindings( Di ) ) +
            #          pp( A_to_u_bindings( Ii ) )
            #        ), latex(
            #          pp( A_to_u_bindings( dAdti ) )
            #        ) ) )
            S_A_arrow = a_arrow(
                pp( Ai ),
                pp( SAi ),
                scale=scale, color='red' )
            D_arrow = a_arrow(
                pp( Ai ),
                pp( Di ),
                scale=scale, color='green' )
            I_arrow = a_arrow(
                pp( Ai + Di.apply_map( lambda x:x*scale ) ),
                pp( Ii ),
                scale=scale, color='purple' )
            dA_du_arrow = a_arrow(
                pp( Ai ),
                pp( dAdti ),
                scale=scale, color='blue' )
            a_phase_plane_annotated += S_A_arrow + D_arrow + I_arrow + dA_du_arrow

a_phase_plane_annotated.axes_labels( [ '$a(u_0,\cdot)$', '$a(u_1,\cdot)$' ] )
a_phase_plane_annotated.save( 'maclev-2-2-a-arrows.png', figsize=(8,8)
    #, xmin=-0.6, xmax=-0.3, ymin=-0.6, ymax=-0.3
    , xmax=0, ymax=0
)

#stop there for now
ltx.close()
save_session('maclev-2-2-geom')
sys.exit()

ltx.close() 
</source-file>

<project-file filename=maclev-2-2-geom.sage.out.html/>

And the motion of the Lotka-Volterra coefficients $$k$$ and $$a$$:

<project-file filename=maclev-2-2-k-vs-t.png /> 
<project-file filename=maclev-2-2-a-vs-t.png />

<project-file filename=maclev-2-2-Xhat-vs-t.png />
<project-file filename=maclev-2-2-a-vs-a.png />

<project-file filename=maclev-2-2-a-arrows.png />

{% comment %}<project-file filename=maclev-2-2-a-vs-k.png />{% endcomment %}

