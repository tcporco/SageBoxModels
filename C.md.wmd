---
layout: page
title: C(i) model
wmd_project: Notes
---

## Time-delay measles model

<source-file filename=C.R>
# Can't do a full probability-evolution simulation, because
# probabilities at different times correlate - too much data.
# Do single realizations, and replicate them.

# E is a list of numbers, recording d_e(x),
# the date x was exposed,  for each individual x
# who is exposed but not yet infectious.
# initial value: 66 people exposed on day 1.
E <- rep( 1, 66 )

# I is a list of numbers, d_e(x) for each x who is infectious.
# Initial value: nobody
I <- c()

# Transition kernels
# p_inc(\tau) = prob( person exposed becomes infectious \tau days later )
# fake data for testing: everybody incubates 8 days
p_inc <- c( rep(0,7), 1 )

# p_rec(\tau) = prob( person exposed stops being infections \tau days later )
# or should it be \tau days after becoming infectious?
# fake data for testing: everybody recovers after 18 days
p_rec <- c( rep(0,17), 1 )

# p_r(d) = prob( infectious individual exposes d people in a given day )
p_r <- c( 0.956, 0.044 )

# Update rule on day t:
# for each x in I, add d people exposed on day t, following p_r(d);
# and recover x with probability p_rec(t - d_e(x))
# for each x in E, transition to infectious with probability p_inc( t - d_e(x) )

update <- function( t ) {
  n_exposed <- Reduce( '+', sample(0:(length(p_r)-1), length(I), prob=p_r, replace=TRUE), 0 )
  cat('n_exposed'); print(n_exposed)
  p_recs <- sapply( I, function(x) p_rec[t-x] )
  cat('p_recs'); print(p_recs)
  recovered <- sapply( p_recs, function(p) sample(c(FALSE,TRUE), 1, prob=c(1-p,p)) )
  cat('recovered'); print(recovered)
  p_incs <- sapply( E, function(x) p_inc[t-x] )
  cat('p_incs'); print(p_incs)
  incubated <- vapply( p_incs, function(p) sample(c(FALSE,TRUE), 1, prob=c(1-p,p)), FALSE )
  cat('incubated'); print(incubated)
  new_I <- c( I[!recovered], E[incubated] )
  new_E <- c( E[!incubated], rep( t, n_exposed ) )
  I <<- new_I
  cat('I'); print(I)
  E <<- new_E
  cat('E'); print(E)
}

cat('I'); print(I)
cat('E'); print(E)
timeseries = data.frame( E=c( length(E) ), I=c( length(I) ) )

for (t in 2:40) {
  update(t)
  timeseries[ length(timeseries$E) + 1, ] <- c( length(E), length(I) )
}

write.csv( timeseries, file='C.csv' )

print( as.numeric( row.names(timeseries) ) )
print( range( as.numeric( row.names(timeseries) ) ) )
print(range( timeseries$E, timeseries$I ))

plot( range( as.numeric( row.names(timeseries) ) ), range( timeseries$E, timeseries$I ), type='n' )
lines( row.names(timeseries), timeseries$E, col='red' )
lines( row.names(timeseries), timeseries$I, col='blue' )
</source-file>

<project-file filename=C.Rout.pdf/>
